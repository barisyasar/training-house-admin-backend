// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ExerciseType {
  exercise
  rest
}

enum MeasurementType {
  time
  reps
}

model Exercise {
  exerciseId             String          @id @default(uuid())
  type           ExerciseType
  measurementType MeasurementType
  duration       Int?            // for time-based exercises and rest
  reps           Int?            // for rep-based exercises
  isEachSide     Boolean?        // for rep-based exercises
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt

  // Relations
  translations   ExerciseTranslation[]
  equipments     ExerciseEquipment[]
  targetBodyParts ExerciseTargetBodyPart[]
  gifs           ExerciseGif[]
  publicWorkoutExercises PublicWorkoutExercise[]

  @@map("exercises")
}

model ExerciseTranslation {
  exerciseTranslationId          String       @id @default(uuid())
  exerciseId  String
  locale      String
  name        String
  desc        String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  // Relations
  exercise    Exercise     @relation(fields: [exerciseId], references: [exerciseId], onDelete: Cascade)
  steps       ExerciseStep[]

  @@unique([exerciseId, locale])
  @@map("exercise_translations")
}

model ExerciseStep {
  exerciseStepId                    String               @id @default(uuid())
  exerciseTranslationId String
  value                 String
  order                 Int
  createdAt             DateTime             @default(now())
  updatedAt             DateTime             @updatedAt

  // Relations
  exerciseTranslation   ExerciseTranslation  @relation(fields: [exerciseTranslationId], references: [exerciseTranslationId], onDelete: Cascade)

  @@map("exercise_steps")
}

model Equipment {
  equipmentId    String   @id @default(uuid())
  translations EquipmentTranslation[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  exercises ExerciseEquipment[]

  @@map("equipments")
}

model EquipmentTranslation {
  equipmentTranslationId String @id @default(uuid())
  equipmentId String
  locale String
  label String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  equipment Equipment @relation(fields: [equipmentId], references: [equipmentId], onDelete: Cascade)

  @@unique([equipmentId, locale])
  @@map("equipment_translations")
}

model ExerciseEquipment {
  exerciseEquipmentId         String   @id @default(uuid())
  exerciseId String
  equipmentId String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  exercise   Exercise @relation(fields: [exerciseId], references: [exerciseId], onDelete: Cascade)
  equipment  Equipment @relation(fields: [equipmentId], references: [equipmentId], onDelete: Cascade)

  @@map("exercise_equipments")
}

model TargetBodyPart {
  targetBodyPartId    String   @id @default(uuid())
  translations TargetBodyPartTranslation[]
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  // Relations
  exercises ExerciseTargetBodyPart[]

  @@map("target_body_parts")
}

model TargetBodyPartTranslation {
  targetBodyPartTranslationId String @id @default(uuid())
  targetBodyPartId String
  locale String
  label String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  targetBodyPart TargetBodyPart @relation(fields: [targetBodyPartId], references: [targetBodyPartId], onDelete: Cascade)

  @@unique([targetBodyPartId, locale])
  @@map("target_body_part_translations")
}

model ExerciseTargetBodyPart {
  exerciseTargetBodyPartId                String          @id @default(uuid())
  exerciseId        String
  targetBodyPartId  String
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt

  // Relations
  exercise          Exercise        @relation(fields: [exerciseId], references: [exerciseId], onDelete: Cascade)
  targetBodyPart    TargetBodyPart  @relation(fields: [targetBodyPartId], references: [targetBodyPartId], onDelete: Cascade)

  @@map("exercise_target_body_parts")
}

model ExerciseGif {
  exerciseGifId         String   @id @default(uuid())
  exerciseId String
  order      Int
  url        String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  exercise   Exercise @relation(fields: [exerciseId], references: [exerciseId], onDelete: Cascade)

  @@map("exercise_gifs")
}

model Category {
  categoryId String @id @default(uuid())
  translations CategoryTranslation[]
  publicWorkouts PublicWorkout[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("categories")
}

model CategoryTranslation {
  categoryTranslationId String @id @default(uuid())
  categoryId String
  locale String
  label String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  category Category @relation(fields: [categoryId], references: [categoryId], onDelete: Cascade)

  @@unique([categoryId, locale])
  @@map("category_translations")
}

model Goal {
  goalId String @id @default(uuid())
  translations GoalTranslation[]
  publicWorkouts PublicWorkout[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("goals")
}

model GoalTranslation {
  goalTranslationId String @id @default(uuid())
  goalId String
  locale String
  label String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  goal Goal @relation(fields: [goalId], references: [goalId], onDelete: Cascade)

  @@unique([goalId, locale])
  @@map("goal_translations")
}

model Plan {
  planId String @id @default(uuid())
  translations PlanTranslation[]
  publicWorkouts PublicWorkout[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("plans")
}

model PlanTranslation {
  planTranslationId String @id @default(uuid())
  planId String
  locale String
  label String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  plan Plan @relation(fields: [planId], references: [planId], onDelete: Cascade)

  @@unique([planId, locale])
  @@map("plan_translations")
}

model PublicWorkout {
  publicWorkoutId String @id @default(uuid())
  translations PublicWorkoutTranslation[]
  duration Int
  calories Int
  level String
  banners PublicWorkoutBanner[]
  categories Category[]
  goals Goal[]
  planId String
  plan Plan @relation(fields: [planId], references: [planId])
  isFeatured Boolean
  exercises PublicWorkoutExercise[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("public_workouts")
}

model PublicWorkoutTranslation {
  publicWorkoutTranslationId String @id @default(uuid())
  publicWorkoutId String
  locale String
  name String
  desc String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  publicWorkout PublicWorkout @relation(fields: [publicWorkoutId], references: [publicWorkoutId], onDelete: Cascade)

  @@unique([publicWorkoutId, locale])
  @@map("public_workout_translations")
}

model PublicWorkoutBanner {
  publicWorkoutBannerId String @id @default(uuid())
  publicWorkoutId String
  order Int
  url String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  publicWorkout PublicWorkout @relation(fields: [publicWorkoutId], references: [publicWorkoutId], onDelete: Cascade)

  @@map("public_workout_banners")
}

model PublicWorkoutExercise {
  publicWorkoutExerciseId String @id @default(uuid())
  publicWorkoutId String
  exerciseId String
  orderNumber Int
  measurementType String
  duration        Int
  reps            Int
  type String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  publicWorkout PublicWorkout @relation(fields: [publicWorkoutId], references: [publicWorkoutId], onDelete: Cascade)
  exercise Exercise @relation(fields: [exerciseId], references: [exerciseId], onDelete: Cascade)

  @@map("public_workout_exercises")
}
